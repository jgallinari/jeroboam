
package com.jeroboam.api;

import java.math.BigInteger;
import java.util.List;
import java.util.Map;
import jakarta.jws.WebMethod;
import jakarta.jws.WebParam;
import jakarta.jws.WebService;
import jakarta.jws.soap.SOAPBinding;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.ws.Holder;
import clojure.java.api.Clojure;
import clojure.lang.IFn;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 3.0.0-M4
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Simple", targetNamespace = "http://api.jeroboam.com/")
@SOAPBinding(style = SOAPBinding.Style.RPC)
@XmlSeeAlso({
    ObjectFactory.class
})
public class SimpleImpl implements Simple {


    /**
     * 
     * @param addonList
     * @param sessionAuthId
     * @param requestId
     * @param coId
     */
    @WebMethod(action = "http://api.jeroboam.com/getAddonList")
    public void getAddonList(
        @WebParam(name = "sessionAuthId", partName = "sessionAuthId")
        String sessionAuthId,
        @WebParam(name = "coId", partName = "coId")
        String coId,
        @WebParam(name = "requestId", mode = WebParam.Mode.OUT, partName = "requestId")
        Holder<BigInteger> requestId,
        @WebParam(name = "addonList", mode = WebParam.Mode.OUT, partName = "addonList")
        Holder<ArrayOfAddon> addonList) {

        IFn requireFn = Clojure.var("clojure.core", "require");
        requireFn.invoke(Clojure.read("com.jeroboam.api.api"));

        IFn getAddonListFn = Clojure.var("com.jeroboam.api.api", "getAddonList");
        Map result = (Map) getAddonListFn.invoke(sessionAuthId, coId);
        System.out.println("getAddonList: " + result);

        List addons = (List) result.get("addonList");
        System.out.println("addons: " + addons);

        ObjectFactory factory = new ObjectFactory();
        ArrayOfAddon arrayOfAddon = factory.createArrayOfAddon();
        for (Object elt : addons) {
            Map map = (Map) elt;
            Addon addon = factory.createAddon();
            addon.setAddonId(map.get("addonId").toString());
            addon.setAddonName(map.get("addonName").toString());
            addon.setStatusId(map.get("statusId").toString());
            arrayOfAddon.getAddon().add(addon);
        }
        requestId.value = new BigInteger(result.get("requestId").toString());
        addonList.value = arrayOfAddon;
    }

}
